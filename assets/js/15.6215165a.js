(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{497:function(e,t,a){"use strict";a.r(t);var o=a(4),s=Object(o.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" keep-alive\n")])])]),a("p",[e._v("以上就是 "),a("strong",[e._v("持久连接节省通信量")]),e._v(" 的字段。")]),e._v(" "),a("p",[e._v("HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。")]),e._v(" "),a("p",[e._v("以当年的通信情况来说，因为都是些容量很小的文本传输，所以即使 这样也没有多大问题。可随着 HTTP 的普及，文档中包含大量图片的 情况多了起来。 比如，使用浏览器浏览一个包含多张图片的 HTML页面时，在发送 请求访问 HTML页面资源的同时，也会请求该 HTML页面里包含的 其他资源。因此，每次的请求都会造成无谓的 TCP 连接建立和断 开，增加通信量的开销。")]),e._v(" "),a("h2",{attrs:{id:"持久连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久连接","aria-hidden":"true"}},[e._v("#")]),e._v(" 持久连接")]),e._v(" "),a("p",[e._v("为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了 持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。")]),e._v(" "),a("p",[e._v("持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。")]),e._v(" "),a("p",[e._v("在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内并 未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接， 但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客 户端也需要支持持久连接。")]),e._v(" "),a("h2",{attrs:{id:"管线化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管线化","aria-hidden":"true"}},[e._v("#")]),e._v(" 管线化")]),e._v(" "),a("p",[e._v("持久连接使得多数请求以管线化（pipelining）方式发送成为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。这样就能做到同时并行发送多个请求，而不需要一个接一个地等待响应了。")]),e._v(" "),a("h1",{attrs:{id:"cookie-状态管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-状态管理","aria-hidden":"true"}},[e._v("#")]),e._v(" Cookie 状态管理")]),e._v(" "),a("p",[e._v("HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。")]),e._v(" "),a("p",[e._v("不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然 可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是 因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。")]),e._v(" "),a("p",[e._v("保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入 了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信 息来控制客户端的状态。")]),e._v(" "),a("p",[e._v("Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的 首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器 发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出 去。")]),e._v(" "),a("p",[e._v("服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一 个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前 的状态信息。")])])},[],!1,null,null,null);t.default=s.exports}}]);