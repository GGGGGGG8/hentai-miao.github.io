(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{565:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-引言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-引言","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 引言")]),t._v(" "),s("p",[t._v("Immer 是 18 年火起来的项目，由 "),s("a",{attrs:{href:"https://github.com/mobxjs/mobx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mobx"),s("OutboundLink")],1),t._v(" 作者 "),s("a",{attrs:{href:"https://github.com/mweststrate",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mweststrate"),s("OutboundLink")],1),t._v(" 研发")]),t._v(" "),s("p",[t._v("了解 mobx 的同学会发现，Immer 就是更底层的 Mobx，它将 Mobx 的特性发扬光大，得以结合到任何数据流框架，使用起来非常优雅")]),t._v(" "),s("h2",{attrs:{id:"_2-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 概述")]),t._v(" "),s("h3",{attrs:{id:"麻烦的-immutable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#麻烦的-immutable","aria-hidden":"true"}},[t._v("#")]),t._v(" 麻烦的 Immutable")]),t._v(" "),s("p",[t._v("Immer 想解决的问题，是利用元编程简化 Immutable 使用的复杂度。举个例子 🌰，我们写一个纯函数：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addProducts")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("products")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cloneProducts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("products"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  cloneProducts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shoes"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cloneProducts\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("虽然代码不复杂，但是写起来依然内心不爽，我们必须将 "),s("code",[t._v("products")]),t._v(" 拷贝一份，再调用 "),s("code",[t._v("push")]),t._v(" 函数修改刷新 "),s("code",[t._v("cloneProducts")]),t._v("，再返回它")]),t._v(" "),s("p",[t._v("如果原生 JS 支持 "),s("code",[t._v("Immutable")]),t._v("，就可以直接使用 "),s("code",[t._v("push")]),t._v(" 了，而 "),s("code",[t._v("Immer")]),t._v(" 就让 JS 现在就支持：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" addProducts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("produce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("products")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  products"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shoes'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("很有趣吧，这两个 "),s("code",[t._v("addProducts")]),t._v(" 函数功能一模一样，而且都是纯函数")]),t._v(" "),s("h3",{attrs:{id:"别扭的-setstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#别扭的-setstate","aria-hidden":"true"}},[t._v("#")]),t._v(" 别扭的 setState")]),t._v(" "),s("p",[t._v("我们知道，react 框架中 "),s("code",[t._v("setState")]),t._v(" 支持函数式写法：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isShow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("配合解构语法，写起来仍然是如此优雅，那么数据稍微复杂一点呢？就要忍受糟糕的 "),s("code",[t._v("Immutable")]),t._v(" 了：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cloneProducts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("products"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  cloneProducts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shoes'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    cloneProducts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("但是引入 "),s("code",[t._v("Immer")]),t._v(" 之后一切都改变了：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("produce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isShow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("produce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("products"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shoes'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这就是 "),s("code",[t._v("Immer")]),t._v("："),s("code",[t._v("Create the next immutable state by mutating the current one.")])]),t._v(" "),s("h2",{attrs:{id:"_3-精读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-精读","aria-hidden":"true"}},[t._v("#")]),t._v(" 3 精读")]),t._v(" "),s("p",[s("code",[t._v("Immer")]),t._v(" 是更底层的拼图，它可以插入到任何数据流框架作为功能增强，不得不感叹 Mweststrate 真的非常高瞻远瞩")]),t._v(" "),s("p",[s("code",[t._v("Immer")]),t._v(" 是一个支持柯里化，"),s("strong",[t._v("仅支持同步计算的工具")]),t._v("，所以非常适合作为 "),s("code",[t._v("redux")]),t._v(" 的 "),s("code",[t._v("reducer")]),t._v(" 使用")]),t._v(" "),s("blockquote",[s("p",[t._v("Immer 也支持直接 return value，这个功能比较简单，所以此功能跳过不谈")]),t._v(" "),s("p",[t._v("PS: mutable 与 return 不能同时返回不同对象，否则弄不清楚到哪种修改是有效的")])]),t._v(" "),s("p",[t._v("柯里化详情自行查看 "),s("a",{attrs:{href:"https://github.com/dominictarr/curry",target:"_blank",rel:"noopener noreferrer"}},[t._v("curry"),s("OutboundLink")],1),t._v("，我们来看 "),s("code",[t._v("produce")]),t._v(" 函数的 "),s("code",[t._v("callback")]),t._v(" 部分：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("produce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("draft")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  draft"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("obj")]),t._v(" 是个普通对象，那么黑魔法一定出现在 "),s("code",[t._v("draft")]),t._v(" 对象，"),s("code",[t._v("Immer")]),t._v(" 给 "),s("code",[t._v("draft")]),t._v(" 对象的所有属性做了监听")]),t._v(" "),s("p",[t._v("所以整体思路就有了："),s("code",[t._v("draft")]),t._v(" 是 "),s("code",[t._v("obj")]),t._v(" 的代理，对 "),s("code",[t._v("draft")]),t._v(" mutable 的修改都会流入到自定义 "),s("code",[t._v("setter")]),t._v(" 函数，它并不修改原始对象的值，而是递归父级不断浅拷贝，最终返回新的顶层对象，作为 "),s("code",[t._v("produce")]),t._v(" 函数的返回值")]),t._v(" "),s("h3",{attrs:{id:"生成代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 生成代理")]),t._v(" "),s("p",[t._v("第一步，也就是将 "),s("code",[t._v("obj")]),t._v(" 转为 "),s("code",[t._v("draft")]),t._v(" 这一步，为了提高 "),s("code",[t._v("Immutable")]),t._v(" 的运行效率，需要一些额外信息，因此将 "),s("code",[t._v("obj")]),t._v(" 封装成一个包含额外信息的代理对象：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tmodified"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否被修改过")]),t._v("\n  finalized"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否已经完成（所有 setter 完成，并且已经生成了 copy）")]),t._v("\n  parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父级对象")]),t._v("\n  base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原始对象")]),t._v("\n  copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// base（也就是 obj）的浅拷贝，使用 Object.assign(Object.create(null), obj)实现")]),t._v("\n  proxies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储每个 propertyKey 的代理对象，采用懒初始化策略")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在这个代理对象上，绑定了自定义 "),s("code",[t._v("getter")]),t._v("、"),s("code",[t._v("setter")]),t._v("，然后直接将其扔给 "),s("code",[t._v("produce")]),t._v(" 执行")]),t._v(" "),s("h3",{attrs:{id:"getter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getter","aria-hidden":"true"}},[t._v("#")]),t._v(" getter")]),t._v(" "),s("p",[s("code",[t._v("produce")]),t._v(" 回调函数中包含了用户的 "),s("code",[t._v("mutable")]),t._v(" 代码，所以现在入口变成了 "),s("code",[t._v("getter")]),t._v(" 与 "),s("code",[t._v("setter")])]),t._v(" "),s("p",[s("code",[t._v("getter")]),t._v(" 主要用来懒初始化代理对象，也就是当代理对象子属性被访问的时候，才会生成其代理对象")]),t._v(" "),s("p",[t._v("这么说比较抽象，我们举个 🌰 ：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("那么初始情况下，"),s("code",[t._v("draft")]),t._v(" 是 "),s("code",[t._v("obj")]),t._v(" 的代理，所以访问 "),s("code",[t._v("draft.a")]),t._v("、"),s("code",[t._v("draft.b")]),t._v("、"),s("code",[t._v("draft.c")]),t._v(" 时，都能触发 "),s("code",[t._v("getter")]),t._v("、"),s("code",[t._v("setter")]),t._v("，进入自定义处理逻辑，可是对 "),s("code",[t._v("draft.a.x")]),t._v(" 相当于访问了 "),s("code",[t._v("draftA.x")]),t._v("，所以能递归监听一个对象的所有属性")]),t._v(" "),s("p",[t._v("同时，如果代码中只访问了 "),s("code",[t._v("draft.a")]),t._v("，那么只会在内存生成 "),s("code",[t._v("draftA")]),t._v(" 代理，"),s("code",[t._v("b")]),t._v(" "),s("code",[t._v("c")]),t._v(" 属性因为没有访问，因此不需要浪费资源生成代理 "),s("code",[t._v("draftB")]),t._v("、"),s("code",[t._v("draftC")])]),t._v(" "),s("p",[t._v("当然 Immer 做了一些性能优化，以及在对象被修改过（"),s("code",[t._v("modified")]),t._v("）获取其 "),s("code",[t._v("copy")]),t._v(" 对象，为了保证 "),s("code",[t._v("base")]),t._v(" 是不可变的，这里不做展开")]),t._v(" "),s("h3",{attrs:{id:"setter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setter","aria-hidden":"true"}},[t._v("#")]),t._v(" setter")]),t._v(" "),s("p",[t._v("当对 "),s("code",[t._v("draft")]),t._v(" 修改时，会对 "),s("code",[t._v("base")]),t._v(" 也就是原始值进行浅拷贝，保存到 "),s("code",[t._v("copy")]),t._v(" 属性，同时将 "),s("code",[t._v("modified")]),t._v(" 属性设置为 "),s("code",[t._v("true")]),t._v("。这样就完成了最重要的 "),s("code",[t._v("Immutable")]),t._v(" 过程，而且浅拷贝并不是很消耗性能，加上是按需浅拷贝，因此 "),s("code",[t._v("Immer")]),t._v(" 的性能还可以")]),t._v(" "),s("p",[t._v("同时为了保证整条链路的对象都是新对象，会根据 "),s("code",[t._v("parent")]),t._v(" 属性递归父级，不断浅拷贝，直到这个叶子节点到根节点整条链路对象都换新为止")]),t._v(" "),s("h3",{attrs:{id:"生成-immutable-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成-immutable-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 生成 Immutable 对象")]),t._v(" "),s("p",[t._v("当执行完 "),s("code",[t._v("produce")]),t._v(" 后，用户的所有修改已经完成（所以 "),s("code",[t._v("Immer")]),t._v(" 没有支持异步），如果 "),s("code",[t._v("modified")]),t._v(" 属性为 "),s("code",[t._v("false")]),t._v(" ，说明用户根本没有更改这个对象，那直接返回原始 "),s("code",[t._v("base")]),t._v(" 属性即可")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("modified")]),t._v(" 属性为 "),s("code",[t._v("true")]),t._v("，说明对象发生了改变，返回 "),s("code",[t._v("copy")]),t._v(" 属性即可。但是 "),s("code",[t._v("setter")]),t._v(" 过程是递归的，"),s("code",[t._v("draft")]),t._v(" 的子对象也是 "),s("code",[t._v("draft")]),t._v("（包含了 "),s("code",[t._v("base")]),t._v("、"),s("code",[t._v("copy")]),t._v("、"),s("code",[t._v("modified")]),t._v(" 等额外属性的代理），我们必须一层层递归，拿到真正的值")]),t._v(" "),s("p",[t._v("所以在这个阶段，所有 "),s("code",[t._v("draft")]),t._v(" 的 "),s("code",[t._v("finalized")]),t._v(" 都是 "),s("code",[t._v("false")]),t._v("、"),s("code",[t._v("copy")]),t._v(" 内部可能还存在大量 "),s("code",[t._v("draft")]),t._v(" 属性，因此递归 "),s("code",[t._v("base")]),t._v(" 与 "),s("code",[t._v("copy")]),t._v(" 的子属性，如果相同，就直接返回；如果不同，递归一次整个过程")]),t._v(" "),s("p",[t._v("最后返回的对象是由 "),s("code",[t._v("base")]),t._v(" 的一些属性（没有修改的部分）和 "),s("code",[t._v("copy")]),t._v(" 的一些属性（修改的部分）最终拼接而成的。最后使用 "),s("code",[t._v("freeze")]),t._v(" 冻结 "),s("code",[t._v("copy")]),t._v(" 属性，将 "),s("code",[t._v("finalized")]),t._v(" 属性设置为 "),s("code",[t._v("true")])]),t._v(" "),s("p",[t._v("至此，返回值生成完毕，我们将最终值保存在 "),s("code",[t._v("copy")]),t._v(" 属性上，并将其冻结，返回了 "),s("code",[t._v("Immutable")]),t._v(" 的值")]),t._v(" "),s("p",[s("code",[t._v("Immer")]),t._v(" 因此完成了不可思议的操作："),s("code",[t._v("Create the next immutable state by mutating the current one")])]),t._v(" "),s("blockquote",[s("p",[t._v("源码读到这里，发现 Immer 其实可以支持异步，只要支持 produce 函数返回 Promise 即可。最大的问题是，最后对代理的 "),s("code",[t._v("revoke")]),t._v(" 清洗，需要借助全局变量，这一点阻碍了 Immer 对异步的支持。")])]),t._v(" "),s("h2",{attrs:{id:"_4-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 4 总结")]),t._v(" "),s("p",[t._v("读到这，如果觉得不过瘾，可以看看 "),s("a",{attrs:{href:"https://github.com/anish000kumar/redux-box",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-box"),s("OutboundLink")],1),t._v(" 这个库，利用 immer + redux 解决了 reducer 冗余 "),s("code",[t._v("return")]),t._v(" 的问题。")]),t._v(" "),s("blockquote",[s("p",[t._v("同样我们也开始思考并设计新的数据流框架，笔者在 2018.3.24 的携程技术沙龙将会分享 "),s("a",{attrs:{href:"http://mp.weixin.qq.com/s/54BJPM7aldH6yq6qj2Yrpw",target:"_blank",rel:"noopener noreferrer"}},[t._v("《mvvm 前端数据流框架精讲》"),s("OutboundLink")],1),t._v("，分享这几年涌现的各套数据流技术方案研究心得，感兴趣的同学欢迎报名参加。")])]),t._v(" "),s("h2",{attrs:{id:"_5-更多讨论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-更多讨论","aria-hidden":"true"}},[t._v("#")]),t._v(" 5 更多讨论")]),t._v(" "),s("p",[t._v("讨论地址是：[精读《Immer.js》源码》 · Issue #68 · dt-fe/weekly](")])])},[],!1,null,null,null);a.default=n.exports}}]);