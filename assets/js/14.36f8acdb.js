(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{496:function(t,a,e){"use strict";e.r(a);var r=e(4),T=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ol",[e("li",[t._v("常见 HTTP 方法有哪些？使用场景分别是什么？")]),t._v(" "),e("li",[t._v("GET 和 POST 有什么区别？")]),t._v(" "),e("li",[t._v("什么是 RESTful API？")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gfmi41z07fj30ec07wwga.jpg",alt:"1550460252440"}})]),t._v(" "),e("h2",{attrs:{id:"常见-http-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见-http-方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见 HTTP 方法")]),t._v(" "),e("h3",{attrs:{id:"get-获取资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-获取资源","aria-hidden":"true"}},[t._v("#")]),t._v(" GET（获取资源）")]),t._v(" "),e("blockquote",[e("p",[t._v("GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接 口）那样的程序，则返回经过执行后的输出结果。")])]),t._v(" "),e("p",[t._v("告诉服务器我要要东西。")]),t._v(" "),e("h3",{attrs:{id:"post-传输实体主体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#post-传输实体主体","aria-hidden":"true"}},[t._v("#")]),t._v(" POST（传输实体主体）")]),t._v(" "),e("blockquote",[e("p",[t._v("虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。")])]),t._v(" "),e("p",[t._v("告诉服务器我要给东西。")]),t._v(" "),e("h3",{attrs:{id:"put-传输文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#put-传输文件","aria-hidden":"true"}},[t._v("#")]),t._v(" PUT（传输文件）")]),t._v(" "),e("blockquote",[e("p",[t._v("PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。")])]),t._v(" "),e("blockquote",[e("p",[t._v("但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以 上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。若 配合 Web 应用程序的验证机制，或架构设计采用 REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。")])]),t._v(" "),e("p",[t._v("告诉服务器我要更信。")]),t._v(" "),e("h3",{attrs:{id:"head-获得报文首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head-获得报文首部","aria-hidden":"true"}},[t._v("#")]),t._v(" HEAD（获得报文首部）")]),t._v(" "),e("blockquote",[e("p",[t._v("HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。")])]),t._v(" "),e("h3",{attrs:{id:"delete-删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-删除文件","aria-hidden":"true"}},[t._v("#")]),t._v(" DELETE（删除文件）")]),t._v(" "),e("blockquote",[e("p",[t._v("DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。 但是，HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用 程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。")])]),t._v(" "),e("h3",{attrs:{id:"options-询问支持的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-询问支持的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" OPTIONS（询问支持的方法）")]),t._v(" "),e("blockquote",[e("p",[t._v("OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。")])]),t._v(" "),e("h3",{attrs:{id:"connect-要求用隧道协议连接代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#connect-要求用隧道协议连接代理","aria-hidden":"true"}},[t._v("#")]),t._v(" CONNECT（要求用隧道协议连接代理）")]),t._v(" "),e("blockquote",[e("p",[t._v("方法要求在与代理服务器通信时建立隧道，实现用隧道协 议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容 加 密后经网络隧道传输。")])]),t._v(" "),e("h3",{attrs:{id:"trace-追踪路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trace-追踪路径","aria-hidden":"true"}},[t._v("#")]),t._v(" TRACE（追踪路径）")]),t._v(" "),e("blockquote",[e("p",[t._v("TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方 法。 发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服 务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最 后接收到请求的服务器端则返回状态码 200 OK 的响应。 客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改 / 篡改的。这是因为，请求想要连接到源目标服务器可能会通过代理 中转，TRACE 方法就是用来确认连接过程中发生的一系列操作。 但是，TRACE 方法本来就不怎么常用，再加上它容易引发 XST（Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlgy1gfmi46xjj4j30iu0ae0ue.jpg",alt:"1550461246988"}})]),t._v(" "),e("h2",{attrs:{id:"get-和-post-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-区别","aria-hidden":"true"}},[t._v("#")]),t._v(" GET 和 POST 区别")]),t._v(" "),e("p",[t._v("最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。")]),t._v(" "),e("p",[t._v("我们来看一看 "),e("a",{attrs:{href:"http://www.w3school.com.cn/tags/html_ref_httpmethods.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3school"),e("OutboundLink")],1),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("GET在浏览器回退时是无害的，而POST会再次提交请求。")]),t._v(" "),e("li",[t._v("GET产生的URL地址可以被Bookmark，而POST不可以。")]),t._v(" "),e("li",[t._v("GET请求会被浏览器主动cache，而POST不会，除非手动设置。")]),t._v(" "),e("li",[t._v("GET请求只能进行url编码，而POST支持多种编码方式。")]),t._v(" "),e("li",[t._v("GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。")]),t._v(" "),e("li",[t._v("GET请求在URL中传送的参数是有长度限制的，而POST么有。")]),t._v(" "),e("li",[t._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制。")]),t._v(" "),e("li",[t._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。")]),t._v(" "),e("li",[t._v("GET参数通过URL传递，POST放在Request body中。")])]),t._v(" "),e("p",[t._v("![img](file:///Users/xu/Code/Notes/0%E5%86%99%E4%BB%A3%E7%A0%81%E5%95%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-HTTP/2-HTTP%20%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81RESTfulAPI/1-%E5%B8%B8%E8%A7%81%20HTTP%20%E6%96%B9%E6%B3%95%E5%8F%8A%E5%9C%BA%E6%99%AF.assets/1550472916971.png?lastModify=1591720608)")]),t._v(" "),e("p",[t._v("其实 get 和 post 没有本质上的区别，它们是 HTTP 协议中的两种发送请求的方式，底层都是 TCP/IP，所以它们都是 TCP 链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。")]),t._v(" "),e("h3",{attrs:{id:"不同的汽车"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同的汽车","aria-hidden":"true"}},[t._v("#")]),t._v(" 不同的汽车")]),t._v(" "),e("p",[t._v("在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。")]),t._v(" "),e("h3",{attrs:{id:"运输公司"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运输公司","aria-hidden":"true"}},[t._v("#")]),t._v(" 运输公司")]),t._v(" "),e("p",[t._v("但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于"),e("strong",[t._v("参数大小")]),t._v("的限制又是从哪来的呢？")]),t._v(" "),e("p",[t._v("在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。")]),t._v(" "),e("blockquote",[e("p",[t._v("好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。")])]),t._v(" "),e("h3",{attrs:{id:"重大区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重大区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 重大区别")]),t._v(" "),e("p",[e("strong",[t._v("GET产生一个TCP数据包；POST产生两个TCP数据包。")])]),t._v(" "),e("p",[t._v("长的说：")]),t._v(" "),e("p",[t._v("对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；")]),t._v(" "),e("p",[t._v("而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。")]),t._v(" "),e("p",[t._v("也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。")]),t._v(" "),e("p",[t._v("因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？")]),t._v(" "),e("ul",[e("li",[t._v("GET与POST都有自己的语义，不能随便混用。")]),t._v(" "),e("li",[t._v("据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。")]),t._v(" "),e("li",[t._v("并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。")])])])},[],!1,null,null,null);a.default=T.exports}}]);